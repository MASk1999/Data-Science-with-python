If you are unfamiliar with IDLE, here are some quick facts to make you understand the text below:
(*) IDLE provides a shell to execute commands one line at a time.
(*) As soon as you type the command and press enter the interpreter processes the python command and gives desired outputs and error messages.
(*) The lines starting with '>>>' represents the python program or commands.
(*) The lines without the '>>>' sign and after the command/program is the output you get when you run the command by pressing enter.
(*) To run an entire program at once, you can create a new file by pressing CTRL+N (for windows) and execute the file by pressing F5 key.
------------------------------------------------------------------------------------------------------------------------------------------------

Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.

# The numpy is generally imported as an alias np. This is just for having a shorthand notation for numpy while using the functionalities of it.

>>> import numpy as np
If you get an error stating the numpy module isn't available, then you will need to install it using the "pip intsall numpy" command in the cmd

>>> a1=np.array([1,2,3,4,5,6])			# 1D array

>>> type(a1)
<class 'numpy.ndarray'>				# The type of the array is ndarray

>>> b=np.random.randint(0,10,size=(2,3))	# Creating a random 2D array of 2 rows and 3 columns

>>> a2=np.array([[1,2,3,4],[5,6,7,8]])		# 2-D array

>>> a3=np.array([[[1,2],[3,4]],[[5,6],[7,8]],[[9,10],[11,12]]])		# 3-D array

>>> a3.ndim
3			# Checking the dimensions of the array

>>> a3.shape		# shape of the 3D array is 3 rows, 2 columns and 2 pages
(3, 2, 2)		

>>> print(a3)
[[[ 1  2]
  [ 3  4]]

 [[ 5  6]
  [ 7  8]]

 [[ 9 10]
  [11 12]]]

>>> np.arange(0, 30, 2)			# Creating an array having elements from  0 to 30 with step 2
array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28])

>>> np.linspace(0, 4, 9)		# Creating an array with 9 equally spaced elements between 0 to 4
array([0. , 0.5, 1. , 1.5, 2. , 2.5, 3. , 3.5, 4. ])

>>> np.ones((2,2),dtype='int64')	# Creating an array of ones of 2 rows and 2 columns
array([[1, 1],
       [1, 1]], dtype=int64)

>>> np.zeros((2,2),dtype='int32')	# Creating a zero array of 2 rows and 2 columns
array([[0, 0],
       [0, 0]])

>>> np.eye(3,dtype='int32')		# Creating an identity matrix of ndim=3
array([[1, 0, 0],
       [0, 1, 0],
       [0, 0, 1]])

>>> b.dtype		# checking the datatype of the array
dtype('int32')

>>> a1[4]		# accessing the array elements of the 1D array 'a' with index 4 					
5

>>> b
array([[5, 5, 0],
       [6, 8, 5]])

>>> b[1,2]		       # accessing the array element with row index 1 and column index 2
5

>>> a1[-1]                  # accessing the last element of the array
6

>>> a1[0:3]			# Slicing the first three elements of the array a1
array([1, 2, 3])

>>> a2[1:6]			# Slicing by selecting the rows (/if the elements in the row < count specified then entire row is sliced/)
array([[5, 6, 7, 8]])		# Row indexed(1) is selected and the first 6 elements are to be sliced

>>> a1[::-1]
array([6,5,4,3,2,1])
>>> a2[0,0:4]			# Row indexed(0) is selected and the first 4 elements are sliced out
array([1, 2, 3, 4])

>>> a2[0,1:2]			# Row indexed(0) is selected and the elements from index 1-2 are sliced out
array([2])

>>> a2[1,0:4]			# Row indexed(1) is selected and the elements from index 0-4 are sliced out from each row
array([5, 6, 7, 8])

>>> a2[0:2,2]			# Rows indexed 0,1 are selected and the element indexed 2 is sliced out from each row
array([3, 7])			

>>> a2[0:3,1]			# Rows indexed 0,1,2 are selected and the element indexed 1 is sliced out from each row
array([2, 6])

>>> a2[0:3,1:3]			# Rows indexed 0,1,2 are sliced and the elements from index 1-3 are sliced out from each row
array([[2, 3],
       [6, 7]])

>>> a3.astype('f')		# Changing the datatype from int to float of array a3
array([[[ 1.,  2.],
        [ 3.,  4.]],

       [[ 5.,  6.],
        [ 7.,  8.]],

       [[ 9., 10.],
        [11., 12.]]], dtype=float32)

>>> a3[0,1,1]=5			# Changing the values of array

>>> a3.astype('S')				# Changing the dtype to string for array a3
array([[[b'1', b'2'],				# the b appended corresponds to byte strings as python 3 supports unicode
        [b'3', b'4']],

       [[b'5', b'6'],
        [b'7', b'8']],

       [[b'9', b'10'],
        [b'11', b'12']]], dtype='|S11')

>>> a1.copy()					# Creating a copy of the array, any changes made to the copy will not be reflected
array([1, 2, 3, 4, 5, 6])			  to the original array and vice versa

>>> b1=a1.copy()

>>> a1[0]=6

>>> f'Now {a1} is not same as {b1}'
'Now [6 2 3 4 5 6] is not same as [1 2 3 4 5 6]'

>>> c1=a1.view()				# Creating a view of the array a1, any changes made to the array will be reflected
						  in the original array

>>> c1[0]=1

#using formatted strings to print a statement |
#					      V

>>> f'Array {a1} is not same as Array {b1}, because its a copy and changing a copy of the array will not affect the original array'
'Array [1 2 3 4 5 6] is not same as Array [6 2 3 4 5 6], because its a copy and changing a copy of the array will not affect the original array'

>>> f'Array {a1} is same as Array {c1}, because its a view and changing a view of the array will affect the original array'
'Array [1 2 3 4 5 6] is same as Array [1 2 3 4 5 6], because its a view and changing a view of the array will affect the original array'

>>> print(b1.base)			# A copy will not be referencing the array a1 and hence a None is printed
None

>>> print(c1.base)			# Shows that the view is referencing the array a1 as its base
[1 2 3 4 5 6]

>>> b1.reshape(2,3)			# Reshaping the array into 2 rows and 3 columns (previously 1 row 6 columns)
array([[6, 2, 3],
       [4, 5, 6]])

>>> b1.flatten()			# To change the array into a 1-D array
array([6, 2, 3, 4, 5, 6])

>>> b1.reshape(3,2)
array([[6, 2],
       [3, 4],
       [5, 6]])

>>> b1.reshape(-1)			# We can also flatten the array using the reshape function with argument '-1'
array([6, 2, 3, 4, 5, 6])

>>> for x in a3:			# Printing an array using loops 					
	print(x)	

[[1 2]
 [3 4]]
[[5 6]
 [7 8]]
[[ 9 10]
 [11 12]]

>>> for x in a3:			# Printing each element of array using a loop
	for y in x:
		for z in y:
			print(z)			

1
2
3
4
5
6
7
8
9
10
11
12

>>> for x in np.nditer(a3):		# Printing each element of array using nditer function
	print(x)	
1
2
3
4
5
6
7
8
9
10
11
12

>>> d1=a1.reshape(2,3)

>>> d1.T                           # Transposing the array
array([[1, 4],
       [2, 5],
       [3, 6]])

>>> a1[:,np.newaxis]               # Creating a column array using np.newaxis attribute
array([[1],
       [2],
       [3],
       [4],
       [5],
       [6]])

>>> f=np.array([1,2,3,4])		

>>> g=np.array([5,6,7,8])

>>> np.concatenate([f,g])		# concatenating the arrays
array([1, 2, 3, 4, 5, 6, 7, 8])

>>> np.hstack([f,g])			# concatenating the array horizontally (adds the 2nd array to the right of the 1st array) 
array([1, 2, 3, 4, 5, 6, 7, 8])

>>> np.vstack([f,g])			# concatenating the array vertically (adds the 2nd array as a row, resulting in 2D array)
array([[1, 2, 3, 4],
       [5, 6, 7, 8]])

>>> h=np.vstack([f,g])

>>> upper,lower=np.vsplit(h,[1]) 	# splitting an array vertically into 2 parts, the [1] indicates that each split should contain an array

>>> upper				# upper portion of splitted array
array([[1, 2, 3, 4]])

>>> lower				# lower portion of the splitted array
array([[5, 6, 7, 8]])

>>> right,left=np.hsplit(h,[2])		# splitting an array horizontally into 2 parts, the [2] indicates that each split should contain 2 columns

>>> right				# right portion of the splitted array
array([[1, 2],
       [5, 6]])

>>> left				# left portion of the splitted array
array([[3, 4],
       [7, 8]])

>>> a1+2                           # Broadcasting an array, this adds 2 to every element of the array
array([3, 4, 5, 6, 7, 8])

>>> a1*2                           # Multiplying 2 to every element of the array                           
array([ 2,  4,  6,  8, 10, 12])

>>> a1**3                          # Cubing each element in the array using broadcasting
array([  1,   8,  27,  64, 125, 216], dtype=int32)

>>> np.negative(a1)		   # Negating each value in the array
array([-1, -2, -3, -4, -5, -6])

>>> np.absolute(a)		   # similar to abs function
array([1, 2, 3, 4, 5, 6])

>>> np.multiply.reduce(a1)	   # Goes on multiplying each element of array, until the array elements are exhausted 
720				   # On a closer look, this gives the factorial of the consecutive elements starting from 1

>>> np.multiply.accumulate(a1)				# To store each intermendiate results of multiplying the array
array([  1,   2,   6,  24, 120, 720], dtype=int32)

>>> x=np.array([1,2,3,4])

>>> y=np.array([5,6,7,8])

>>> x+y				   # adding two arrays x and y
array([ 6,  8, 10, 12])

>>> x>2				   # Creating a boolean mask of each element greater than 2
array([False, False,  True,  True])

>>> np.count_nonzero(x)		   # Counting the number of non-zero elements in the array
4

>>> np.count_nonzero(x>2)	   # Counting the number of non-zero elements in the array which are greater than 2
2

>>> x[x<3]			   # To get an array of the masked values 
array([1, 2])

>>> b=np.random.randint(0,10,size=(2,3))

>>> b
array([[2, 0, 5],
       [3, 2, 6]])

>>> row=[0,1]

>>> col=[1,2]

>>> b[row,col]			# Fancy indexing : Indexing arrays with more than one parameter
array([0, 6])			# Gives an array consisting of 0th row 1st element (indexes), and 1st row 2nd element

>>> b[row,col]+=1		# Performing operations on the specific element using fancy indexing

>>> b				# Only the elements with the macthing indices are operated upon
array([[2, 1, 5],
       [3, 2, 7]])

>>> np.add.at(b,0,2)		# For adding a scalar to a specific element of array using .at function

>>> b				# The 0th element is added with the scalar value of 2
array([[4, 3, 7],
       [3, 2, 7]])

>>> np.subtract.at(b,(0,1),2)	# 2D indexing can be done in this way

>>> b				# Element at row 0 and column 1 is subtracted with a value 2
array([[4, 4, 2],
       [4, 2, 2]])

>>> np.sort(b)			# Sorting the array elements, each row is sorted separately.
array([[3, 4, 7],
       [2, 3, 7]])

>>> c= np.array([[ 8,  7,  4, 12, 14],
       [ 4,  8,  8, 10,  2],
       [10,  2,  2, 14, 14]])

>>> c				
array([[ 8,  7,  4, 12, 14],
       [ 4,  8,  8, 10,  2],
       [10,  2,  2, 14, 14]])

>>> np.argsort(c)		# To get the indexes of the sorted elements, we use argsort
array([[2, 1, 0, 3, 4],
       [4, 0, 1, 2, 3],
       [1, 2, 0, 3, 4]], dtype=int32)

>>> np.sort(c,axis=0)		# To sort the array along the columns
array([[ 4,  2,  2, 10,  2],
       [ 8,  7,  4, 12, 14],
       [10,  8,  8, 14, 14]]) 

>>> np.sort(c,axis=1)		# To sort the array along the rows, same as the sort() function
array([[ 4,  7,  8, 12, 14],
       [ 2,  4,  8,  8, 10],
       [ 2,  2, 10, 14, 14]])

>>> c=np.delete(c,(3,4),axis=1)	# To delete rows or columns from an array. Note: axis=1 refers to columns

>>> c
array([[ 8,  7,  4],
       [ 4,  8,  8],
       [10,  2,  2]])

>>> c.diagonal()		# Getting the diagonal elements. Note: Possible only for square matrices
array([8, 8, 2])

