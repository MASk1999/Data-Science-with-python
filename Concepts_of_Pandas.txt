If you are unfamiliar with IDLE, here are some quick facts to make you understand the text below:
(*) IDLE provides a shell to execute commands one line at a time.
(*) As soon as you type the command and press enter the interpreter processes the python command and gives desired outputs and error messages.
(*) The lines starting with '>>>' represents the python program or commands.
(*) The lines without the '>>>' sign and after the command/program is the output you get when you run the command by pressing enter.
(*) To run an entire program at once, you can create a new file by pressing CTRL+N (for windows) and execute the file by pressing F5 key.
------------------------------------------------------------------------------------------------------------------------------------------------

Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.

# As Numpy is aliased as np, similarly Pandas is aliased as pd

>>> import pandas as pd

>>> import numpy as np			# It is good to import numpy as well because some of the operations involves methods of Numpy

>>> pd.Series()					# Creating an empty series (structured as 1D arrays) using pandas
Warning (from warnings module):
  File "__main__", line 1
DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
Series([], dtype: float64)

>>> List=['a','b','c','d','e','f']

>>> pd.Series(List)				# Creating a series from a list
0    a						# It can be observed that the dtype of the series of string elements is object and not a string
1    b					
2    c
3    d
4    e
5    f
dtype: object

>>> pd.Series(List,index=[1,2,3,4,5,6])		# Overwriting the indexes of the series (custom indices)
1    a
2    b
3    c
4    d
5    e
6    f
dtype: object

>>> Dict={'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}	

>>> series1=pd.Series(Dict)			# Creating a series using a dictionary

>>> series1					# Note that the dictionary keys will become the indices of the rows
a    1
b    2
c    3
d    4
e    5
f    6
dtype: int64

>>> series1[1]				# Accessing the elements of the series
2

>>> series1[0:3]			# slicing operation to get the first 3 elements of the series
a    1
b    2
c    3
dtype: int64

>>> series1['a']			# Accessing the series using keys or indices
1

>>> series1[['a','d','f']]		# Accessing multiple elements using indices
a    1
d    4
f    6
dtype: int64

>>> list(series1.items())					# To get a list of values. Each tuple consists of index and its value.
[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]

>>> series1.keys()						# To get a list of keys of the series 
Index(['a', 'b', 'c', 'd', 'e', 'f'], dtype='object')

>>> series1['g']=7			# Adding a row to the series

>>> series1
a    1
b    2
c    3
d    4
e    5
f    6
g    7
dtype: int64

>>> pd.DataFrame()			# Creating a DataFrame (Structured as 2D arrays) using pandas
Empty DataFrame
Columns: []
Index: []

>>> data=['Audi','BMW','Mercedes','Skoda','Renault']		

>>> pd.DataFrame(data)				# Creating a dataframe from a list
          0
0      Audi
1       BMW
2  Mercedes
3     Skoda
4   Renault

>>> data=[['Audi',17.84],['BMW',14],['Mercedes',16.65],['Skoda',17.9],['Renault',13.8]]		

>>> pd.DataFrame(data)				# Creating a dataframe of two columns from a list of lists
          0      1
0      Audi  17.84
1       BMW  14.00
2  Mercedes  16.65
3     Skoda  17.90
4   Renault  13.80

>>> data={'Car':['A4','A6','X1','M3','GLA','GLC'],
	  'Company':['Audi','Audi','BMW','BMW','Mercedes','Mercedes'],
	  'Mileage_(P)':[17.84,14,16.65,20,17.9,13.8]}

>>> pd.DataFrame(data)				# Creating a dataframe from a dictionary, the keys of the dictionary becomes the column names
   Car   Company  Mileage_(P)
0   A4      Audi        17.84
1   A6      Audi        14.00
2   X1       BMW        16.65
3   M3       BMW        20.00
4  GLA  Mercedes        17.90
5  GLC  Mercedes        13.80

>>> df.index=[1,2,3,4,5,6]			# Renaming the default index using the .index method

>>> df
   Car   Company  Mileage_(P)
1   A4      Audi        17.84
2   A6      Audi        14.00
3   X1       BMW        16.65
4   M3       BMW        20.00
5  GLA  Mercedes        17.90
6  GLC  Mercedes        13.80

>>> df['Top_Speed']=[209.196,249.426,193.104,250,205,249.426]	# Adding a column to a dataframe

>>> df
   Car   Company  Mileage_(P)  Top_Speed
1   A4      Audi        17.84    209.196
2   A6      Audi        14.00    249.426
3   X1       BMW        16.65    193.104
4   M3       BMW        20.00    250.000
5  GLA  Mercedes        17.90    205.000
6  GLC  Mercedes        13.80    249.426

>>> df.head()					# To get the top 5 rows of the dataframe
   Car   Company Mileage_(P) Top_Speed
1   A4      Audi       17.84   209.196
2   A6      Audi          14   249.426
3   X1       BMW       16.65   193.104
4   M3       BMW          20       250
5  GLA  Mercedes        17.9       205

>>> df['Car']					# To access the data of a particular column
1     A4
2     A6
3     X1
4     M3
5    GLA
6    GLC
Name: Car, dtype: object

>>> df.loc[:,'Car':'Mileage_(P)']		# Slicing a dataframe to get all the rows and columns from 'Car' to 'Mileage_(P)'
   Car   Company  Mileage_(P)
1   A4      Audi        17.84
2   A6      Audi        14.00
3   X1       BMW        16.65
4   M3       BMW        20.00
5  GLA  Mercedes        17.90
6  GLC  Mercedes        13.80

>>> df.loc[1:3,['Car','Top_Speed']]		# Slicing and fancy indexing a dataframe to get the top three rows and specified cols
  Car  Top_Speed
1  A4    209.196
2  A6    249.426
3  X1    193.104

>>> df['Sample']='T1'

>>> df
   Car   Company  Mileage_(P)  Top_Speed Sample
1   A4      Audi        17.84    209.196     T1
2   A6      Audi        14.00    249.426     T1
3   X1       BMW        16.65    193.104     T1
4   M3       BMW        20.00    250.000     T1
5  GLA  Mercedes        17.90    205.000     T1
6  GLC  Mercedes        13.80    249.426     T1

>>> del df['Sample']				# Deleting a column from a dataframe

>>> df
   Car   Company  Mileage_(P)  Top_Speed
1   A4      Audi        17.84    209.196
2   A6      Audi        14.00    249.426
3   X1       BMW        16.65    193.104
4   M3       BMW        20.00    250.000
5  GLA  Mercedes        17.90    205.000
6  GLC  Mercedes        13.80    249.426

>>> df.loc['Sample']='S1'			# Adding a row to the dataframe using the .loc function

>>> df
        Car   Company Mileage_(P) Top_Speed
1        A4      Audi       17.84   209.196
2        A6      Audi          14   249.426
3        X1       BMW       16.65   193.104
4        M3       BMW          20       250
5       GLA  Mercedes        17.9       205
6       GLC  Mercedes        13.8   249.426
Sample   S1        S1          S1        S1

>>> df=df.drop('Sample')			# To delete a row from the dataframe

>>> df
   Car   Company Mileage_(P) Top_Speed
s1   A4      Audi       17.84   209.196
2   A6      Audi          14   249.426
3   X1       BMW       16.65   193.104
4   M3       BMW          20       250
5  GLA  Mercedes        17.9       205
6  GLC  Mercedes        13.8   249.426

>>> max(df['Top_Speed'])			# Using aggregations to get summary data
250.0

>>> df.values					# To get all the values in the dataframe. The data is stored as array of lists
array([['A4', 'Audi', 17.84, 209.196],
       ['A6', 'Audi', 14.0, 249.426],
       ['X1', 'BMW', 16.65, 193.104],
       ['M3', 'BMW', 20.0, 250.0],
       ['GLA', 'Mercedes', 17.9, 205.0],
       ['GLC', 'Mercedes', 13.8, 249.426]], dtype=object) 

>>> index=[[1,2,3,4],['a','b','c','d']]		# Creating a custom index for multi-indexing

>>> pd.DataFrame(np.random.randint(0,10,(4,4)),index=index)	# Creating a multi-indexed dataframe using the custom indices.
     0  1  2  3
1 a  7  5  2  1
2 b  1  1  5  4
3 c  5  0  5  6
4 d  3  7  1  8

>>> index=[['a','a','b','b'],[1,2,1,2]]

>>> y=pd.DataFrame(np.random.randint(0,10,(4,4)),index=index)

>>> y
     0  1  2  3
a 1  6  4  1  6
  2  0  3  7  5
b 1  2  2  6  7
  2  4  4  4  7

>>> y.unstack()
   0     1     2     3   
   1  2  1  2  1  2  1  2
a  3  2  4  8  3  8  2  4
b  2  7  7  1  3  7  6  0

>>> index=pd.MultiIndex.from_product([['a','b'],[1,2]])

>>> y=pd.DataFrame(np.random.randint(0,10,(4,4)),index=index)

>>> y
     0  1  2  3
a 1  4  3  0  9
  2  1  0  2  7
b 1  0  3  1  9
  2  6  9  4  9

>>> df_MI=df.set_index(['Company','Year(LCD)'])

>>> df_MI
                    Car  Mileage_(P)  Top_Speed
Company  Year(LCD)                             
Audi     2016        A4        17.84    209.196
         2019        A6        14.00    249.426
BMW      2008        X1        16.65    193.104
         2018        M3        20.00    250.000
Mercedes 2013       GLA        17.90    205.000
         2016       GLC        13.80    249.426

>>> ser1=pd.Series(list('ABC'),index=range(3))

>>> ser2=pd.Series(list('DEF'),index=range(3,6))

>>> pd.concat([ser1,ser2])
0    A
1    B
2    C
3    D
4    E
5    F
dtype: object

>>> ser3=pd.Series(list('xyz'))

>>> pd.concat([ser1,ser3])

>>> pd.concat([ser1,ser3])
0    A
1    B
2    C
0    x
1    y
2    z
dtype: object

>>> pd.concat([ser1,ser3],ignore_index=True)
0    A
1    B
2    C
3    x
4    y
5    z
dtype: object

>>> pd.concat([ser1,ser2],keys=['x','y'])
x  0    A
   1    B
   2    C
y  3    D
   4    E
   5    F
dtype: object

>>> df1=pd.DataFrame(np.random.randint(0,15,(3,3)),columns=list('ABC'))

>>> df1
    A   B  C
0  12  10  2
1   3  12  0
2  14   9  2

>>> df2=pd.DataFrame(np.random.randint(0,10,(3,3)),columns=list('BCD'))

>>> df2
   B  C  D
0  7  6  4
1  2  2  7
2  7  8  8

>>> pd.concat([df1,df2],join='inner')
    B  C
0  10  2
1  12  0
2   9  2
0   7  6
1   2  2
2   7  8

>>> pd.concat([df1,df2],ignore_index=True)
      A   B  C    D
0  12.0  10  2  NaN
1   3.0  12  0  NaN
2  14.0   9  2  NaN
3   NaN   7  6  4.0
4   NaN   2  2  7.0
5   NaN   7  8  8.0

>>> pd.concat([df1,df2],ignore_index=True, join='inner')
    B  C
0  10  2
1  12  0
2   9  2
3   7  6
4   2  2
5   7  8

>>> df1.append(df2)
      A   B  C    D
0  12.0  10  2  NaN
1   3.0  12  0  NaN
2  14.0   9  2  NaN
0   NaN   7  6  4.0
1   NaN   2  2  7.0
2   NaN   7  8  8.0

>>> df1.append(df2, ignore_index=True)
      A   B  C    D
0  12.0  10  2  NaN
1   3.0  12  0  NaN
2  14.0   9  2  NaN
3   NaN   7  6  4.0
4   NaN   2  2  7.0
5   NaN   7  8  8.0

>>> df1.append(df2, ignore_index=True).notnull()
       A     B     C      D
0   True  True  True  False
1   True  True  True  False
2   True  True  True  False
3  False  True  True   True
4  False  True  True   True
5  False  True  True   True

>>> df1.append(df2,True).fillna('---')
     A   B  C    D
0   12  10  2  ---
1    3  12  0  ---
2   14   9  2  ---
3  ---   7  6    4
4  ---   2  2    7
5  ---   7  8    8

>>> df1.append(df2,True).fillna('--')
    A   B  C   D
0  12  10  2  --
1   3  12  0  --
2  14   9  2  --
3  --   7  6   4
4  --   2  2   7
5  --   7  8   8

>>> data1={'Fruit':['Apple','Orange','Mango','Banana','Chikoo'],
	   'Colour':['Red','Orange','Yellow','Yellow','Brown']}

>>> data2={'Fruit':['Apple','Orange','Watermelon','Banana'],
	   'Water_Content':['Medium','High','High','Low']}

>>> df1=pd.DataFrame(data1)

>>> df2=pd.DataFrame(data2)

>>> pd.merge(df1,df2)
    Fruit  Colour Water_Content
0   Apple     Red        Medium
1  Orange  Orange          High
2  Banana  Yellow           Low

>>> pd.merge(df1,df2,on='Fruit')
    Fruit  Colour Water_Content
0   Apple     Red        Medium
1  Orange  Orange          High
2  Banana  Yellow           Low

>>> df1.join(df2,lsuffix='_L', rsuffix='_R')
  Fruit_L  Colour     Fruit_R Water_Content
0   Apple     Red       Apple        Medium
1  Orange  Orange      Orange          High
2   Mango  Yellow  Watermelon          High
3  Banana  Yellow      Banana           Low
4  Chikoo   Brown         NaN           NaN

>>> df3=pd.DataFrame({'name':['Bob','Jake','Lisa','Sue'],
		      'salary':[70000,80000,120000,90000]})

>>> df4=pd.DataFrame({'Employee':['Bob','Jake','Lisa','Sue'],
		      'Group':['Accounting','Engineering','Engineering','HR']})

>>> pd.merge(df3,df4,left_on='name',right_on='Employee')
   name  salary Employee        Group
0   Bob   70000      Bob   Accounting
1  Jake   80000     Jake  Engineering
2  Lisa  120000     Lisa  Engineering
3   Sue   90000      Sue           HR

>>> df4=pd.DataFrame({'name':['Bob','Jake','Lisa','Sue'],
		      'salary':[70000,80000,120000,90000]})

>>> df3=pd.DataFrame({'Employee':['Bob','Jake','Lisa','Sue'],
		      'Group':['Accounting','Engineering','Engineering','HR']})

>>> df3
  Employee        Group
0      Bob   Accounting
1     Jake  Engineering
2     Lisa  Engineering
3      Sue           HR

>>> df4
   name  salary
0   Bob   70000
1  Jake   80000
2  Lisa  120000
3   Sue   90000

>>> pd.merge(df3,df4,left_on='Employee',right_on='name').drop('name', axis=1)
  Employee        Group  salary
0      Bob   Accounting   70000
1     Jake  Engineering   80000
2     Lisa  Engineering  120000
3      Sue           HR   90000

>>> df3.join(df4)
  Employee        Group  name  salary
0      Bob   Accounting   Bob   70000
1     Jake  Engineering  Jake   80000
2     Lisa  Engineering  Lisa  120000
3      Sue           HR   Sue   90000

>>> df6=pd.DataFrame({'name':['Peter','Paul','Mary'],
		      'food':['fish','beans','bread']},
		      columns=['name','food'])

>>> df7=pd.DataFrame({'name':['Mary','Joseph'],
		      'drink':['Wine','Beer']},
		     columns=['name','drink'])

>>> pd.merge(df6,df7)
   name   food drink
0  Mary  bread  Wine

>>> pd.merge(df6,df7,how='outer')
     name   food drink
0   Peter   fish   NaN
1    Paul  beans   NaN
2    Mary  bread  Wine
3  Joseph    NaN  Beer

>>> pd.merge(df6,df7,how='outer').dropna()
   name   food drink
2  Mary  bread  Wine

>>> pd.merge(df6,df7,how='outer').ffill()
     name   food drink
0   Peter   fish   NaN
1    Paul  beans   NaN
2    Mary  bread  Wine
3  Joseph  bread  Beer

>>> pd.merge(df6,df7,how='outer').fillna('--')
     name   food drink
0   Peter   fish    --
1    Paul  beans    --
2    Mary  bread  Wine
3  Joseph     --  Beer

>>> pd.merge(df6,df7,how='left')
    name   food drink
0  Peter   fish   NaN
1   Paul  beans   NaN
2   Mary  bread  Wine

>>> df8=pd.DataFrame({'name':['Bob','Jake','Lisa','Sue'],
		      'rank':[1,2,3,4]})

>>> df9=pd.DataFrame({'name':['Bob','Jake','Lisa','Sue'],
		      'rank':[3,1,4,2]})

>>> df8
   name  rank
0   Bob     1
1  Jake     2
2  Lisa     3
3   Sue     4


>>> df9
   name  rank
0   Bob     3
1  Jake     1
2  Lisa     4
3   Sue     2

>>> pd.merge(df8,df9,on='name')
   name  rank_x  rank_y
0   Bob       1       3
1  Jake       2       1
2  Lisa       3       4
3   Sue       4       2

>>> dataframe=pd.DataFrame({'Key':['A','B','C','A','B','C'],
			    'data':range(6)}, columns=['Key','data'])

>>> dataframe
  Key  data
0   A     0
1   B     1
2   C     2
3   A     3
4   B     4
5   C     5

>>> dataframe.groupby('Key')
<pandas.core.groupby.generic.DataFrameGroupBy object at 0x09499C30>

>>> dataframe.groupby('Key').sum()
     data
Key      
A       3
B       5
C       7
>>> dataframe.groupby('Key').mean()
     data
Key      
A     1.5
B     2.5
C     3.5

>>> dataframe.groupby('Key').prod()
     data
Key      
A       0
B       4
C      10
