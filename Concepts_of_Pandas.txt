If you are unfamiliar with IDLE, here are some quick facts to make you understand the text below:
(*) IDLE provides a shell to execute commands one line at a time.
(*) As soon as you type the command and press enter the interpreter processes the python command and gives desired outputs and error messages.
(*) The lines starting with '>>>' represents the python program or commands.
(*) The lines without the '>>>' sign and after the command/program is the output you get when you run the command by pressing enter.
(*) To run an entire program at once, you can create a new file by pressing CTRL+N (for windows) and execute the file by pressing F5 key.
------------------------------------------------------------------------------------------------------------------------------------------------

Python 3.7.2 (tags/v3.7.2:9a3ffc0492, Dec 23 2018, 22:20:52) [MSC v.1916 32 bit (Intel)] on win32
Type "help", "copyright", "credits" or "license()" for more information.

# As Numpy is aliased as np, similarly Pandas is aliased as pd

>>> import pandas as pd

>>> import numpy as np			# It is good to import numpy as well because some of the operations involves methods of Numpy

>>> pd.Series()					# Creating an empty series (structured as 1D arrays) using pandas
Warning (from warnings module):
  File "__main__", line 1
DeprecationWarning: The default dtype for empty Series will be 'object' instead of 'float64' in a future version. Specify a dtype explicitly to silence this warning.
Series([], dtype: float64)

>>> List=['a','b','c','d','e','f']

>>> pd.Series(List)				# Creating a series from a list
0    a						# It can be observed that the dtype of the series of string elements is object and not a string
1    b					
2    c
3    d
4    e
5    f
dtype: object

>>> pd.Series(List,index=[1,2,3,4,5,6])		# Overwriting the indexes of the series (custom indices)
1    a
2    b
3    c
4    d
5    e
6    f
dtype: object

>>> Dict={'a':1,'b':2,'c':3,'d':4,'e':5,'f':6}	

>>> series1=pd.Series(Dict)			# Creating a series using a dictionary

>>> series1					# Note that the dictionary keys will become the indices of the rows
a    1
b    2
c    3
d    4
e    5
f    6
dtype: int64

>>> series1[1]				# Accessing the elements of the series
2

>>> series1[0:3]			# slicing operation to get the first 3 elements of the series
a    1
b    2
c    3
dtype: int64

>>> series1['a']			# Accessing the series using keys or indices
1

>>> series1[['a','d','f']]		# Accessing multiple elements using indices
a    1
d    4
f    6
dtype: int64

>>> list(series1.items())					# To get a list of values. Each tuple consists of index and its value.
[('a', 1), ('b', 2), ('c', 3), ('d', 4), ('e', 5), ('f', 6)]

>>> series1.keys()						# To get a list of keys of the series 
Index(['a', 'b', 'c', 'd', 'e', 'f'], dtype='object')

>>> series1['g']=7			# Adding a row to the series

>>> series1
a    1
b    2
c    3
d    4
e    5
f    6
g    7
dtype: int64

>>> pd.DataFrame()			# Creating a DataFrame (Structured as 2D arrays) using pandas
Empty DataFrame
Columns: []
Index: []

>>> data=['Audi','BMW','Mercedes','Skoda','Renault']		

>>> pd.DataFrame(data)				# Creating a dataframe from a list
          0
0      Audi
1       BMW
2  Mercedes
3     Skoda
4   Renault

>>> data=[['Audi',17.84],['BMW',14],['Mercedes',16.65],['Skoda',17.9],['Renault',13.8]]		

>>> pd.DataFrame(data)				# Creating a dataframe of two columns from a list of lists
          0      1
0      Audi  17.84
1       BMW  14.00
2  Mercedes  16.65
3     Skoda  17.90
4   Renault  13.80

>>> data={'Car':['A4','A6','X1','M3','GLA','GLC'],
	  'Company':['Audi','Audi','BMW','BMW','Mercedes','Mercedes'],
	  'Mileage_(P)':[17.84,14,16.65,20,17.9,13.8]}

>>> pd.DataFrame(data)				# Creating a dataframe from a dictionary, the keys of the dictionary becomes the column names
   Car   Company  Mileage_(P)
0   A4      Audi        17.84
1   A6      Audi        14.00
2   X1       BMW        16.65
3   M3       BMW        20.00
4  GLA  Mercedes        17.90
5  GLC  Mercedes        13.80

>>> df.index=[1,2,3,4,5,6]			# Renaming the default index using the .index method

>>> df
   Car   Company  Mileage_(P)
1   A4      Audi        17.84
2   A6      Audi        14.00
3   X1       BMW        16.65
4   M3       BMW        20.00
5  GLA  Mercedes        17.90
6  GLC  Mercedes        13.80

>>> df['Top_Speed']=[209.196,249.426,193.104,250,205,249.426]	# Adding a column to a dataframe

>>> df
   Car   Company  Mileage_(P)  Top_Speed
1   A4      Audi        17.84    209.196
2   A6      Audi        14.00    249.426
3   X1       BMW        16.65    193.104
4   M3       BMW        20.00    250.000
5  GLA  Mercedes        17.90    205.000
6  GLC  Mercedes        13.80    249.426

>>> df.head()					# To get the top 5 rows of the dataframe
   Car   Company Mileage_(P) Top_Speed
1   A4      Audi       17.84   209.196
2   A6      Audi          14   249.426
3   X1       BMW       16.65   193.104
4   M3       BMW          20       250
5  GLA  Mercedes        17.9       205

>>> df['Car']					# To access the data of a particular column
1     A4
2     A6
3     X1
4     M3
5    GLA
6    GLC
Name: Car, dtype: object

>>> df.loc[:,'Car':'Mileage_(P)']		# Slicing a dataframe to get all the rows and columns from 'Car' to 'Mileage_(P)'
   Car   Company  Mileage_(P)
1   A4      Audi        17.84
2   A6      Audi        14.00
3   X1       BMW        16.65
4   M3       BMW        20.00
5  GLA  Mercedes        17.90
6  GLC  Mercedes        13.80

>>> df.loc[1:3,['Car','Top_Speed']]		# Slicing and fancy indexing a dataframe to get the top three rows and specified cols
  Car  Top_Speed
1  A4    209.196
2  A6    249.426
3  X1    193.104

>>> df['Sample']='T1'

>>> df
   Car   Company  Mileage_(P)  Top_Speed Sample
1   A4      Audi        17.84    209.196     T1
2   A6      Audi        14.00    249.426     T1
3   X1       BMW        16.65    193.104     T1
4   M3       BMW        20.00    250.000     T1
5  GLA  Mercedes        17.90    205.000     T1
6  GLC  Mercedes        13.80    249.426     T1

>>> del df['Sample']				# Deleting a column from a dataframe

>>> df
   Car   Company  Mileage_(P)  Top_Speed
1   A4      Audi        17.84    209.196
2   A6      Audi        14.00    249.426
3   X1       BMW        16.65    193.104
4   M3       BMW        20.00    250.000
5  GLA  Mercedes        17.90    205.000
6  GLC  Mercedes        13.80    249.426

>>> df.loc['Sample']='S1'			# Adding a row to the dataframe using the .loc function

>>> df
        Car   Company Mileage_(P) Top_Speed
1        A4      Audi       17.84   209.196
2        A6      Audi          14   249.426
3        X1       BMW       16.65   193.104
4        M3       BMW          20       250
5       GLA  Mercedes        17.9       205
6       GLC  Mercedes        13.8   249.426
Sample   S1        S1          S1        S1

>>> df=df.drop('Sample')			# To delete a row from the dataframe

>>> df
   Car   Company Mileage_(P) Top_Speed
1   A4      Audi       17.84   209.196
2   A6      Audi          14   249.426
3   X1       BMW       16.65   193.104
4   M3       BMW          20       250
5  GLA  Mercedes        17.9       205
6  GLC  Mercedes        13.8   249.426

>>> max(df['Top_Speed'])			# Using aggregations to get summary data
250.0

>>> df.values					# To get all the values in the dataframe. The data is stored as array of lists
array([['A4', 'Audi', 17.84, 209.196],
       ['A6', 'Audi', 14.0, 249.426],
       ['X1', 'BMW', 16.65, 193.104],
       ['M3', 'BMW', 20.0, 250.0],
       ['GLA', 'Mercedes', 17.9, 205.0],
       ['GLC', 'Mercedes', 13.8, 249.426]], dtype=object) 

>>> index=[[1,2,3,4],['a','b','c','d']]		# Creating a custom index for multi-indexing

>>> pd.DataFrame(np.random.randint(0,10,(4,4)),index=index)	# Creating a multi-indexed dataframe using the custom indices.
     0  1  2  3
1 a  7  5  2  1
2 b  1  1  5  4
3 c  5  0  5  6
4 d  3  7  1  8




